#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
======================================================================
–°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ù–ê –û–°–ù–û–í–ï PROMETHEUS, GRAFANA –ò BLACKBOX EXPORTER
======================================================================

–û–ø–∏—Å–∞–Ω–∏–µ:
    –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–π —Å –ø–æ–º–æ—â—å—é Docker Compose.
    
    –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:
    - Prometheus: —Å–±–æ—Ä –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    - Grafana: –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–æ–≤
    - Node Exporter: —ç–∫—Å–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Ö–æ—Å—Ç–∞
    - Blackbox Exporter: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤

–ê–≤—Ç–æ—Ä: –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2024
"""

import os
import sys
import time
import subprocess
import json
import requests
from typing import Dict, List, Optional
from pathlib import Path


class MonitoringSystemManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è:
    - –ó–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    - –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    - –ü–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∏–∑ Prometheus
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
    """
    
    def __init__(self, project_dir: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        Args:
            project_dir (str): –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å docker-compose.yml
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        self.project_dir = Path(project_dir) if project_dir else Path(__file__).parent
        
        # –ü—É—Ç–∏ –∫ –≤–∞–∂–Ω—ã–º —Ñ–∞–π–ª–∞–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.docker_compose_file = self.project_dir / "docker-compose.yml"
        self.prometheus_config = self.project_dir / "prometheus" / "prometheus.yml"
        self.blackbox_config = self.project_dir / "blackbox" / "blackbox.yml"
        
        # URLs —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)
        self.prometheus_url = "http://localhost:9090"
        self.grafana_url = "http://localhost:3000"
        self.blackbox_url = "http://localhost:9115"
        self.node_exporter_url = "http://localhost:9100"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        self._validate_project_structure()
    
    def _validate_project_structure(self) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Raises:
            FileNotFoundError: –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
        """
        required_files = [
            self.docker_compose_file,
            self.prometheus_config,
            self.blackbox_config
        ]
        
        for file_path in required_files:
            if not file_path.exists():
                raise FileNotFoundError(
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {file_path}"
                )
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    def start_monitoring(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –ø–æ–º–æ—â—å—é Docker Compose
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã docker-compose
            original_dir = os.getcwd()
            os.chdir(self.project_dir)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º docker-compose –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            result = subprocess.run(
                ["docker-compose", "up", "-d"],
                capture_output=True,
                text=True,
                check=True
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.chdir(original_dir)
            
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            print("\nüìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
            print(f"   ‚Ä¢ Prometheus: {self.prometheus_url}")
            print(f"   ‚Ä¢ Grafana: {self.grafana_url} (admin/admin)")
            print(f"   ‚Ä¢ Node Exporter: {self.node_exporter_url}")
            print(f"   ‚Ä¢ Blackbox Exporter: {self.blackbox_url}")
            
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e.stderr}")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def stop_monitoring(self) -> bool:
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            original_dir = os.getcwd()
            os.chdir(self.project_dir)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            result = subprocess.run(
                ["docker-compose", "down"],
                capture_output=True,
                text=True,
                check=True
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.chdir(original_dir)
            
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º—ã: {e.stderr}")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def check_services_health(self) -> Dict[str, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        Returns:
            Dict[str, bool]: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        """
        services = {
            "Prometheus": self.prometheus_url,
            "Grafana": self.grafana_url,
            "Node Exporter": self.node_exporter_url,
            "Blackbox Exporter": self.blackbox_url
        }
        
        results = {}
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        for service_name, url in services.items():
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                response = requests.get(url, timeout=5)
                is_healthy = response.status_code == 200
                
                status_icon = "‚úÖ" if is_healthy else "‚ùå"
                print(f"   {status_icon} {service_name}: {'–î–æ—Å—Ç—É–ø–µ–Ω' if is_healthy else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
                
                results[service_name] = is_healthy
                
            except requests.exceptions.RequestException:
                print(f"   ‚ùå {service_name}: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–∞–π–º–∞—É—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)")
                results[service_name] = False
        
        return results
    
    def get_prometheus_metrics(self, query: str) -> Optional[Dict]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Prometheus API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        
        Args:
            query (str): PromQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        
        Returns:
            Optional[Dict]: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
            api_url = f"{self.prometheus_url}/api/v1/query"
            params = {"query": query}
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Prometheus API
            response = requests.get(api_url, params=params, timeout=10)
            response.raise_for_status()
            
            return response.json()
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–µ—Ç—Ä–∏–∫ –∏–∑ Prometheus: {str(e)}")
            return None
    
    def show_system_info(self) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        print("\n" + "="*60)
        print("üìä –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê - –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
        print("="*60)
        
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {self.project_dir}")
        print(f"üê≥ Docker Compose —Ñ–∞–π–ª: {self.docker_compose_file}")
        print(f"‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Prometheus: {self.prometheus_config}")
        print(f"‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Blackbox: {self.blackbox_config}")
        
        print("\nüåê URL —Å–µ—Ä–≤–∏—Å–æ–≤:")
        print(f"   ‚Ä¢ Prometheus (–º–µ—Ç—Ä–∏–∫–∏): {self.prometheus_url}")
        print(f"   ‚Ä¢ Grafana (–¥–∞—à–±–æ—Ä–¥—ã): {self.grafana_url}")
        print(f"   ‚Ä¢ Node Exporter (—Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏): {self.node_exporter_url}")
        print(f"   ‚Ä¢ Blackbox Exporter (–≤–Ω–µ—à–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏): {self.blackbox_url}")
        
        print("\nüîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:")
        print("   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ (CPU, RAM, –¥–∏—Å–∫, —Å–µ—Ç—å)")
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö HTTP/HTTPS —Ä–µ—Å—É—Ä—Å–æ–≤")
        print("   ‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –≤ Grafana")
        print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –∞–ª–µ—Ä—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        print("\n‚ö†Ô∏è  –ü–†–ò–ú–ï–ß–ê–ù–ò–ï –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        print("   –í –¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ù–ï–¢ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤!")
        print("   –î–ª—è production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:")
        print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ Grafana")
        print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Basic Auth –¥–ª—è Prometheus")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        print("   ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ä—Ç–∞–º —á–µ—Ä–µ–∑ firewall")


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –º–µ–Ω—é.
    """
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    manager = MonitoringSystemManager()
    
    while True:
        print("\n" + "="*50)
        print("üñ•Ô∏è  –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê - –£–ü–†–ê–í–õ–ï–ù–ò–ï")
        print("="*50)
        print("1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        print("2. üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        print("3. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤")
        print("4. üìä –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ")
        print("5. üìà –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä –º–µ—Ç—Ä–∏–∫ –∏–∑ Prometheus")
        print("6. üö™ –í—ã—Ö–æ–¥")
        
        choice = input("\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ").strip()
        
        if choice == "1":
            # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            success = manager.start_monitoring()
            if success:
                print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (30 —Å–µ–∫—É–Ω–¥)...")
                time.sleep(30)  # –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–∏—Å–∞–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
                manager.check_services_health()
        
        elif choice == "2":
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            manager.stop_monitoring()
        
        elif choice == "3":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            health_results = manager.check_services_health()
            
            healthy_count = sum(health_results.values())
            total_count = len(health_results)
            
            print(f"\nüìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {healthy_count}/{total_count} —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã")
        
        elif choice == "4":
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
            manager.show_system_info()
        
        elif choice == "5":
            # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä –º–µ—Ç—Ä–∏–∫ –∏–∑ Prometheus
            print("\nüìà –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –∏–∑ Prometheus...")
            
            # –ü—Ä–∏–º–µ—Ä PromQL –∑–∞–ø—Ä–æ—Å–æ–≤
            example_queries = [
                ("up", "–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Ü–µ–ª–µ–π"),
                ("node_load1", "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞ 1 –º–∏–Ω—É—Ç—É"),
                ("probe_success", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
            ]
            
            for query, description in example_queries:
                print(f"\nüîç {description} ({query}):")
                result = manager.get_prometheus_metrics(query)
                
                if result and result.get("status") == "success":
                    data = result.get("data", {}).get("result", [])
                    if data:
                        for item in data[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                            metric = item.get("metric", {})
                            value = item.get("value", [])
                            if len(value) >= 2:
                                print(f"   ‚Ä¢ {metric}: {value[1]}")
                    else:
                        print("   (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
                else:
                    print("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        elif choice == "6":
            # –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        else:
            print("\n‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6.")
        
        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
        input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


if __name__ == "__main__":
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
    
    –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
    """
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)
